#!/usr/bin/env perl
# Stores result files generated by runR.pl (the pdf file) in the Database after zipping 
#    (this script must run on ProteoChart_R )
# Date created: 2010 Oct 27
# Last change:  2007 Oct 27
#

use strict;	# comment this line to speed up things
use CGI qw(-debug :standard);
use DBI; 
use DBD::mysql;



$|=1;
#open(STDERR, ">&STDOUT");	


my @allParams=param();
print "Content-type: text/html\n\n";


use strict;	# comment this line to speed up things
use CGI qw(-debug :standard);
use common_DB;
if(!common_DB::checkViewAccess()){exit;}


my $customAnalysisId	=common_DB::trim(param('Custom_Analysis_Id'));
my $fileLocation	=common_DB::trim(param('f'));
my $resultContent;
# verify params
if (($customAnalysisId eq "") | ($fileLocation eq "")) {
  print "ERROR: one or more empty parameters! <!--".join(" ",@allParams)." -->\n";
  exit;
}
	  
if(!open(FILE,"".$fileLocation)){
		print "Could not read:".$fileLocation,"\n<br> $!";
		exit;
}

#my @fileContent=<FILE>;
#close FILE;
#$resultContent=join("\n",@fileContent);

## read binary
binmode FILE; 
my ($data, $n); 
while (($n = read FILE, $data, 1024) != 0) { 
	$resultContent .= $data; 
} 
close(FILE);

my $dbh=common_DB::connectToDB();
my $sth;


#short file names is usually stored in Result_Type
my $shortFileName=$fileLocation;
$shortFileName =~ s/.*\///;


my $sql="select  	Custom_Analysis_Result_Id from MB_CUSTOM_ANALYSIS_RESULT where Custom_Analysis_Id=$customAnalysisId and Result_Type ='$shortFileName'";
eval { $sth= $dbh->prepare($sql); };
if ($@) { print "Couldn't prepare query <pre>'$sql': $DBI::errstr\n</pre>"; exit; };
eval { $sth->execute() ;};
if ($@) { 
	print "Couldn't execute query <pre>'$sql': $DBI::errstr\n</pre>"; 
	exit; 
};

my $row_ref = $sth->fetchrow_hashref() ;
my $resultId=$row_ref->{"Custom_Analysis_Result_Id"};

		

if($resultId ne ""){ # we have to update
	print "Custom_Analysis_Result_Id: $resultId ; updating with:".$shortFileName;

	#$sql="SET max_allowed_packet=100*1024*1024";
	#eval { $sth= $dbh->prepare($sql); };
  #if ($@) { print "<br>Couldn't prepare query <pre>'$sql': $DBI::errstr\n</pre>"; exit; };
  #eval { $sth->execute() ;};
  #if ($@) { print "<br>Couldn't execute query <pre>'$sql': $DBI::errstr\n</pre>";} 


	$sql="update MB_CUSTOM_ANALYSIS_RESULT set Result_Content=COMPRESS(?) where Custom_Analysis_Result_Id=$resultId ";
	eval { $sth= $dbh->prepare($sql); };
	if ($@) { print "Couldn't prepare query <pre>'$sql': $DBI::errstr\n</pre>"; exit; };
	eval { $sth->execute($resultContent) ;};
	if ($@) { print "Couldn't execute query <pre>'$sql': $DBI::errstr\n</pre>"; 
    my (undef, $max_allowed_packet) =  $dbh->selectrow_array( qq{show variables LIKE ? }, undef, "max_allowed_packet" ) ;
    printf "max_allowed_packet => %.2f MB\n or try: SET GLOBAL max_allowed_packet=16*1024*1024; using mysql", $max_allowed_packet  / (1024*1024);
		exit; 
	};
	

}else{ # we have to insert
	$sql="insert into MB_CUSTOM_ANALYSIS_RESULT(Custom_Analysis_Id,Result_Type,Result_Content) values(?,?,COMPRESS(?))";
	eval { $sth= $dbh->prepare($sql); };
	if ($@) { print "Couldn't prepare query <pre>'$sql': $DBI::errstr\n</pre>"; exit; };
	eval { $sth->execute($customAnalysisId,$shortFileName,$resultContent) ;};
	if ($@) { print "Couldn't execute query <pre>'$sql': $DBI::errstr\n</pre>"; 
    my (undef, $max_allowed_packet) =  $dbh->selectrow_array( qq{show variables LIKE ? }, undef, "max_allowed_packet" ) ;
    printf "max_allowed_packet => %.2f MB\n or try: SET GLOBAL max_allowed_packet=16*1024*1024; using mysql", $max_allowed_packet  / (1024*1024);
	  exit;
	};
}

print "<br><span style='font-family:Arial'><b>Done!</b> (Custom_Analysis_Id:<b>$customAnalysisId</b>  File:<b>$shortFileName)</b><span>";
##################################################################

